<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blockchain Components on Filecoin Spec</title>
    <link>/docs/subsystems/blockchain/components/</link>
    <description>Recent content in Blockchain Components on Filecoin Spec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/subsystems/blockchain/components/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Block Producer</title>
      <link>/docs/subsystems/blockchain/components/block_producer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/subsystems/blockchain/components/block_producer/</guid>
      <description>Mining Blocks Having registered as a miner, it&amp;rsquo;s time to start making and checking tickets. At this point, the miner should already be running chain validation, which includes keeping track of the latest TipSets seen on the network.
For additional details around how consensus works in Filecoin, see the expected consensus spec. For the purposes of this section, there is a consensus protocol (Expected Consensus) that guarantees a fair process for determining what blocks have been generated in a round, whether a miner should mine a block themselves, and some rules pertaining to how &amp;ldquo;Tickets&amp;rdquo; should be validated during block validation.</description>
    </item>
    
    <item>
      <title>Block Propagator</title>
      <link>/docs/subsystems/blockchain/components/block_propagator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/subsystems/blockchain/components/block_propagator/</guid>
      <description>The filecoin network needs to broadcast blocks and messages to all peers in the network. This document details how that process works.
Messages and block headers along side the message references are propagated using the gossipsub libp2p pubsub router. Every full node must implement and run that protocol. All pubsub messages are authenticated and must be syntactically validated before being propagated further.
Further more, every full node must implement and offer the bitswap protocol and provide all Cid Referenced objects, it knows of, through it.</description>
    </item>
    
    <item>
      <title>Block Receiver</title>
      <link>/docs/subsystems/blockchain/components/block_receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/subsystems/blockchain/components/block_receiver/</guid>
      <description>A node must decode and perform syntactic validation for every block received before passing it on (e.g. in a lipbp2p pubsub validator).
Syntactic Validation  type Block struct { // Miner is the address of the miner actor that mined this block.  miner Address // Tickets is a chain (possibly singleton) of tickets ending with a winning ticket  // submitted with this block.  tickets [Ticket] // ElectionProof is generated from a past ticket and proves this miner is a leader  // in this block&amp;#39;s round.</description>
    </item>
    
    <item>
      <title>Chain Manager</title>
      <link>/docs/subsystems/blockchain/components/chain_manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/subsystems/blockchain/components/chain_manager/</guid>
      <description>Semantic Validation A semantically valid block:
 must be from a valid miner, i.e. has not been slashed must only have valid parents in the tipset, meaning  that each parent itself must be a valid block all parents must be at same height  must have a valid ticket:  the ticket must be the winning ticket the ticket must be generated from the smallest ticket in the parent tipset all tickets in the ticket array must have been generated by the same miner if it includes intermediary losing tickets in the ticket array, the node must confirm that each ticket correctly generates the next in the array  must have a valid timestamp, meaning  must be later than the earliest parent block time plus appreopriate delay, which is BLOCK_DELAY (30s by default) * len(blk.</description>
    </item>
    
  </channel>
</rss>